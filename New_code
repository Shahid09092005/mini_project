#Install kaggle
!pip install -q kaggle

from google.colab import files
files.upload()

#delete the existing root directory
!rm -rf /root/.kaggle
# Create a directory named "kaggle"
!mkdir ~/.kaggle
#Copy the kaggle.json to created folder
! cp kaggle.json ~/.kaggle/
#permisson for the json to act
! chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d shahidmansuri/dataset    #dataset

!unzip /content/dataset.zip

from IPython.display import clear_output
import os
import sys
import random
import warnings
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tqdm import tqdm
from itertools import chain
from skimage.io import imread, imshow, imread_collection, concatenate_images
from skimage.transform import resize
from skimage.morphology import label
from keras.models import Model, load_model
from keras.layers import Input
import warnings
from keras.layers import Dropout, Lambda
from keras.layers import Conv2D, Conv2DTranspose
from keras.layers import MaxPooling2D
from keras.layers import concatenate
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras import backend as K
import tensorflow as tf

# Ignore UserWarnings from skimage
warnings.filterwarnings('ignore', category=UserWarning, module='skimage')

# Set some parameters

IMG_WIDTH = 128
IMG_HEIGHT = 128
IMG_CHANNELS = 3
# TRAIN_PATH = '/content/train-dataset'
# TEST_PATH = '/content/train2-dataset'

# train_ids = os.listdir(TRAIN_PATH)
# test_ids = os.listdir(TEST_PATH)
# print("Total training images: ",len(train_ids))
# print("Total test images: ",len(test_ids))

X_train = np.zeros((len(train_ids), IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.uint8)
# This created a array shape of (669,128,128,3), We will apped training images on this array.
# Y_train = np.zeros((len(train_ids), IMG_HEIGHT, IMG_WIDTH, 1), dtype=np.bool)
Y_train = np.zeros((len(train_ids), IMG_HEIGHT, IMG_WIDTH, 1), dtype=bool)
# This created a array shape of (669,128,128,1), We will apped test images on this array.
print('Getting and resizing train images and masks ... ')
sys.stdout.flush()
# stdout. flush() forces it to “flush” the buffer, meaning that it will write everything in the buffer to the terminal
for n, id_ in tqdm(enumerate(train_ids), total=len(train_ids)):
  # tqdm for progressive animation
    path = TRAIN_PATH + id_
    img = imread(path + '/images/' + id_ + '.png')[:,:,:IMG_CHANNELS] # Read the images with 3 channels(Usually imread reads images with 4 channels)
    img = resize(img, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True) # DownSample the images keeping the orginal aspect ration
    X_train[n] = img # Appending the images to the X_train array

    # Now we will stich the mask images and make it similar size to the training images
    # mask = np.zeros((IMG_HEIGHT, IMG_WIDTH, 1), dtype=np.bool)
    mask = np.zeros((IMG_HEIGHT, IMG_WIDTH, 1), dtype=bool)

    for mask_file in os.listdir(path + '/masks/'):
        mask_ = imread(path + '/masks/' + mask_file) # Read mask as shape of (256, 256)
        mask_ = np.expand_dims(resize(mask_, (IMG_HEIGHT, IMG_WIDTH), mode='constant',
                                      preserve_range=True), axis=-1) # convert the image to shape of (128,128,1)
        mask = np.maximum(mask, mask_) # takes max values as mask(white nucleus exclue background)
    Y_train[n] = mask # Merge all mask and put it on Y_train

# Get and resize test images
X_test = np.zeros((len(test_ids), IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.uint8)
sizes_test = [] # To upsample during making predicting
print('Getting and resizing test images ... ')
sys.stdout.flush()
for n, id_ in tqdm(enumerate(test_ids), total=len(test_ids)):
    path = TEST_PATH + id_
    img = imread(path + '/images/' + id_ + '.png')[:,:,:IMG_CHANNELS]
    sizes_test.append([img.shape[0], img.shape[1]])
    img = resize(img, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)
    X_test[n] = img

ix = random.randint(0, len(train_ids))
print("Training image")
imshow(X_train[ix])
plt.show()
print("Mask of the image")
imshow(np.squeeze(Y_train[ix]))
plt.show()

